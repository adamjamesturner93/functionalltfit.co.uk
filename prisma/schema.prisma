generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                 String               @id @default(cuid())
  name               String
  image              String?
  email              String               @unique
  dateOfBirth        DateTime?
  membershipStatus   MembershipStatus     @default(ACTIVE)
  membershipPlan     MembershipPlan       @default(FREE)
  role               UserRole             @default(USER)
  authCode           String?
  authCodeExpiry     DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Account            Account[]
  BodyMeasurement    BodyMeasurement[]
  Goal               Goal[]
  HealthData         HealthData[]
  preferences        Preferences?
  Session            Session[]
  UserExerciseWeight UserExerciseWeight[]
  UserProgramme      UserProgramme[]
  savedProgrammes    UserProgrammeSave[]
  savedWorkouts      UserWorkoutSave[]
  savedYogaVideos    UserYogaVideoSave[]
  WorkoutActivity    WorkoutActivity[]
  YogaVideoActivity  YogaVideoActivity[]
}

model Preferences {
  id         String @id @default(cuid())
  userId     String @unique
  lengthUnit Unit   @default(METRIC)
  weightUnit Unit   @default(METRIC)
  user       User   @relation(fields: [userId], references: [id])
}

model HealthData {
  id                     String   @id @default(cuid())
  userId                 String
  date                   DateTime
  weight                 Float
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  restingHeartRate       Int?
  sleepHours             Float?
  stressLevel            Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model BodyMeasurement {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  weight    Float
  calve     Float?
  thigh     Float?
  waist     Float?
  hips      Float?
  butt      Float?
  chest     Float?
  arm       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YogaVideo {
  id                String              @id @default(cuid())
  title             String
  description       String
  type              YogaType
  props             String[]
  muxPlaybackId     String
  muxAssetId        String
  thumbnailUrl      String
  duration          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ProgrammeActivity ProgrammeActivity[]
  savedBy           UserYogaVideoSave[]
  activities        YogaVideoActivity[]
}

model YogaVideoActivity {
  id        String    @id @default(cuid())
  userId    String
  videoId   String
  watchedAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  yogaVideo YogaVideo @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId, watchedAt])
}

model Exercise {
  id                      String                    @id @default(cuid())
  name                    String
  thumbnailUrl            String
  videoUrl                String
  muscleGroups            String[]
  equipment               String                    @default("None")
  type                    ExerciseType
  mode                    ExerciseMode
  instructions            String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  SetExercise             SetExercise[]
  UserExerciseWeight      UserExerciseWeight[]
  WorkoutActivityExercise WorkoutActivityExercise[]
}

model Workout {
  id                 String               @id @default(cuid())
  name               String
  description        String?
  thumbnail          String               @default("/uploads/q2eLjwPDWyHpdKYgiZBYv-Screenshot 2024-05-31 at 14.36.55.png")
  totalLength        Int
  equipment          String[]
  muscleGroups       String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProgrammeActivity  ProgrammeActivity[]
  sets               Set[]
  UserExerciseWeight UserExerciseWeight[]
  savedBy            UserWorkoutSave[]
  WorkoutActivity    WorkoutActivity[]
}

model Set {
  id        String        @id @default(cuid())
  type      SetType
  rounds    Int
  rest      Int
  gap       Int?
  workoutId String
  workout   Workout       @relation(fields: [workoutId], references: [id])
  exercises SetExercise[]
}

model SetExercise {
  id         String   @id @default(cuid())
  exerciseId String
  setId      String
  targetReps Int
  order      Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  set        Set      @relation(fields: [setId], references: [id])
}

model WorkoutActivity {
  id                      String                    @id @default(cuid())
  userId                  String
  workoutId               String
  startedAt               DateTime
  endedAt                 DateTime?
  user                    User                      @relation(fields: [userId], references: [id])
  workout                 Workout                   @relation(fields: [workoutId], references: [id])
  WorkoutActivityExercise WorkoutActivityExercise[]
  sets                    WorkoutActivitySet[]
}

model WorkoutActivitySet {
  id                String                    @id @default(cuid())
  workoutActivityId String
  setNumber         Int
  roundNumber       Int
  exercises         WorkoutActivityExercise[]
  workoutActivity   WorkoutActivity           @relation(fields: [workoutActivityId], references: [id])

  @@unique([workoutActivityId, setNumber, roundNumber])
}

model WorkoutActivityExercise {
  id                   String             @id @default(cuid())
  workoutActivityId    String
  workoutActivitySetId String
  exerciseId           String
  weight               Float
  reps                 Int?
  time                 Int?
  distance             Float?
  roundNumber          Int
  exercise             Exercise           @relation(fields: [exerciseId], references: [id])
  workoutActivity      WorkoutActivity    @relation(fields: [workoutActivityId], references: [id])
  workoutActivitySet   WorkoutActivitySet @relation(fields: [workoutActivitySetId], references: [id])

  @@unique([workoutActivitySetId, exerciseId, roundNumber])
}

model UserExerciseWeight {
  id         String   @id @default(cuid())
  userId     String
  workoutId  String
  exerciseId String
  weight     Float
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  workout    Workout  @relation(fields: [workoutId], references: [id])

  @@unique([userId, workoutId, exerciseId])
}

model Programme {
  id              String              @id @default(cuid())
  title           String
  description     String
  thumbnail       String
  sessionsPerWeek Int
  intention       String
  weeks           Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  activities      ProgrammeActivity[]
  userProgrammes  UserProgramme[]
  savedBy         UserProgrammeSave[]
}

model ProgrammeActivity {
  id           String     @id @default(cuid())
  programmeId  String
  week         Int
  day          Int
  activityType String
  workoutId    String?
  yogaVideoId  String?
  completed    Boolean    @default(false)
  completedAt  DateTime?  @default(now())
  programme    Programme  @relation(fields: [programmeId], references: [id])
  workout      Workout?   @relation(fields: [workoutId], references: [id])
  yogaVideo    YogaVideo? @relation(fields: [yogaVideoId], references: [id])
}

model UserProgramme {
  id          String    @id @default(cuid())
  userId      String
  programmeId String
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  progress    Json
  programme   Programme @relation(fields: [programmeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Goal {
  id          String      @id @default(cuid())
  userId      String
  type        GoalType
  target      Float
  current     Float       @default(0)
  period      GoalPeriod?
  startDate   DateTime    @default(now())
  endDate     DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String?
  description String?
  exerciseId  String?
  user        User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserWorkoutSave {
  id        String   @id @default(cuid())
  userId    String
  workoutId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([userId, workoutId])
  @@index([userId])
  @@index([workoutId])
}

model UserYogaVideoSave {
  id          String    @id @default(cuid())
  userId      String
  yogaVideoId String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  yogaVideo   YogaVideo @relation(fields: [yogaVideoId], references: [id], onDelete: Cascade)

  @@unique([userId, yogaVideoId])
  @@index([userId])
  @@index([yogaVideoId])
}

model UserProgrammeSave {
  id          String    @id @default(cuid())
  userId      String
  programmeId String
  createdAt   DateTime  @default(now())
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, programmeId])
  @@index([userId])
  @@index([programmeId])
}

enum Unit {
  IMPERIAL
  METRIC
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
}

enum MembershipPlan {
  FREE
  BRONZE
  SILVER
  GOLD
}

enum UserRole {
  USER
  ADMIN
}

enum YogaType {
  MINDFULNESS
  BUILD
  EXPLORE
}

enum ExerciseType {
  STRENGTH
  CARDIO
  FLEXIBILITY
  BALANCE
}

enum ExerciseMode {
  REPS
  TIME
  DISTANCE
}

enum SetType {
  MULTISET
  SUPERSET
  TRISET
  CIRCUIT
}

enum GoalPeriod {
  WEEK
  MONTH
}

enum GoalType {
  WEIGHT
  YOGA_SESSIONS
  WORKOUT_SESSIONS
  TOTAL_SESSIONS
  CUSTOM
  EXERCISE_WEIGHT
  EXERCISE_REPS
  EXERCISE_DISTANCE
}
