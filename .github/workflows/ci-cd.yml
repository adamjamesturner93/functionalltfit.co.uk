name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-lint-and-deploy:
    runs-on: ubuntu-latest
    env:
      POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
      POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Cache pnpm modules
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma Client
      run: pnpm exec prisma generate
      if: success()

    - name: Lint
      run: pnpm run lint
      if: success()

    - name: Run tests
      run: pnpm test
      if: success()

    - name: Deploy database changes
      run: pnpm exec prisma migrate deploy
      if: success() && github.ref == 'refs/heads/main'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      if: success() && github.ref == 'refs/heads/main'

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      if: success() && github.ref == 'refs/heads/main'

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      if: success() && github.ref == 'refs/heads/main'

    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      if: success() && github.ref == 'refs/heads/main'