name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Cache pnpm modules
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma Client
      run: pnpm exec prisma generate
      env:
        POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
        POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}

    - name: Lint
      run: pnpm run lint

    - name: Run tests
      run: pnpm test

    - name: Deploy database changes
      run: pnpm exec prisma migrate deploy
      env:
        POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
        POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}

    - name: Build
      run: pnpm run build
      env:
        POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
        POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}

    - name: Deploy to Vercel
      run: pnpm dlx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}